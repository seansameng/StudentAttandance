package com.example.studentattandance.activities;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.studentattandance.R;
import com.example.studentattandance.adapters.AttendanceAdapter;
import com.example.studentattandance.api.ApiClient;
import com.example.studentattandance.api.ApiService;
import com.example.studentattandance.models.Class;
import com.example.studentattandance.models.Attendance;
import com.example.studentattandance.utils.SessionManager;

import java.util.ArrayList;
import java.util.List;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class ClassDetailsActivity extends AppCompatActivity {
    
    // Intent extras
    public static final String EXTRA_CLASS_ID = "class_id";
    public static final String EXTRA_MODE = "mode";
    
    // Modes
    public static final int MODE_VIEW = 0;
    public static final int MODE_EDIT = 1;
    public static final int MODE_CREATE = 2;
    
    private int currentMode = MODE_VIEW;
    private String classId;
    
    private TextView tvClassName;
    private TextView tvSubject;
    private TextView tvTeacher;
    private TextView tvSchedule;
    private TextView tvRoom;
    private TextView tvSemester;
    private TextView tvAcademicYear;
    private TextView tvEnrolledCount;
    private TextView tvDescription;
    private Button btnMarkAttendance;
    private Button btnGenerateReport;
    private RecyclerView rvStudents;
    
    private ApiService apiService;
    private SessionManager sessionManager;
    private Class classDetails;
    private AttendanceAdapter attendanceAdapter;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_class_details);
        
        initViews();
        setupRecyclerView();
        setupClickListeners();
        
        apiService = ApiClient.getInstance(this).getApiService();
        sessionManager = SessionManager.getInstance(this);
        
        // Get intent extras
        classId = getIntent().getStringExtra(EXTRA_CLASS_ID);
        currentMode = getIntent().getIntExtra(EXTRA_MODE, MODE_VIEW);
        
        // Setup UI based on mode
        setupModeBasedUI();
        
        // Load data if in view/edit mode
        if (currentMode != MODE_CREATE) {
            if (classId != null) {
                loadClassDetails(classId);
            } else {
                showError("Class ID not provided");
                finish();
            }
        }
    }
    
    private void setupModeBasedUI() {
        switch (currentMode) {
            case MODE_CREATE:
                setTitle(R.string.add_new_class);
                btnMarkAttendance.setVisibility(View.GONE);
                btnGenerateReport.setText(R.string.save_class);
                // Make TextViews editable (you can convert them to EditTexts in XML or programmatically)
                break;
            case MODE_EDIT:
                setTitle(R.string.edit_class);
                btnMarkAttendance.setVisibility(View.GONE);
                btnGenerateReport.setText(R.string.save_changes);
                // Make TextViews editable
                break;
            case MODE_VIEW:
            default:
                setTitle(R.string.class_details);
                if (sessionManager.isStudent()) {
                    btnMarkAttendance.setVisibility(View.GONE);
                    btnGenerateReport.setVisibility(View.GONE);
                }
                break;
        }
    }
    
    private void initViews() {
        tvClassName = findViewById(R.id.tv_class_name);
        tvSubject = findViewById(R.id.tv_subject);
        tvTeacher = findViewById(R.id.tv_teacher);
        tvSchedule = findViewById(R.id.tv_schedule);
        tvRoom = findViewById(R.id.tv_room);
        tvSemester = findViewById(R.id.tv_semester);
        tvAcademicYear = findViewById(R.id.tv_academic_year);
        tvEnrolledCount = findViewById(R.id.tv_enrolled_count);
        tvDescription = findViewById(R.id.tv_description);
        btnMarkAttendance = findViewById(R.id.btn_mark_attendance);
        btnGenerateReport = findViewById(R.id.btn_generate_report);
        rvStudents = findViewById(R.id.rv_students);
    }
    
    private void setupRecyclerView() {
        attendanceAdapter = new AttendanceAdapter(this, new ArrayList<>());
        rvStudents.setLayoutManager(new LinearLayoutManager(this));
        rvStudents.setAdapter(attendanceAdapter);
    }
    
    private void setupClickListeners() {
        btnMarkAttendance.setOnClickListener(v -> {
            if (currentMode == MODE_VIEW) {
                // Navigate to MarkAttendanceActivity
                Intent intent = new Intent(this, MarkAttendanceActivity.class);
                intent.putExtra("class_id", classDetails.getId());
                startActivity(intent);
            }
        });
        
        btnGenerateReport.setOnClickListener(v -> {
            if (currentMode == MODE_VIEW) {
                // Generate and show class report
                generateClassReport();
            } else if (currentMode == MODE_CREATE || currentMode == MODE_EDIT) {
                // Save class
                saveClass();
            }
        });
        
        // Show/hide buttons based on user role and mode
        if (sessionManager.isStudent()) {
            btnMarkAttendance.setVisibility(View.GONE);
            btnGenerateReport.setVisibility(View.GONE);
        }
    }
    
    private void loadClassDetails(String classId) {
        // Load class details from API
        apiService.getClassDetails("Bearer " + sessionManager.getAccessToken(), classId)
                .enqueue(new Callback<Class>() {
                    @Override
                    public void onResponse(Call<Class> call, Response<Class> response) {
                        if (response.isSuccessful() && response.body() != null) {
                            classDetails = response.body();
                            displayClassDetails();
                            loadClassAttendance(classId);
                        } else {
                            showError("Failed to load class details");
                        }
                    }
                    
                    @Override
                    public void onFailure(Call<Class> call, Throwable t) {
                        showError("Network error. Please try again.");
                    }
                });
    }
    
    private void displayClassDetails() {
        if (classDetails != null) {
            tvClassName.setText(classDetails.getClassName());
            tvSubject.setText(classDetails.getSubject());
            tvTeacher.setText(classDetails.getTeacherName());
            tvSchedule.setText(classDetails.getSchedule());
            tvRoom.setText(classDetails.getRoom());
            tvSemester.setText(classDetails.getSemester());
            tvAcademicYear.setText(classDetails.getAcademicYear());
            tvEnrolledCount.setText(String.format("%d/%d", 
                classDetails.getEnrolledCount(), classDetails.getMaxStudents()));
            
            if (classDetails.getDescription() != null && !classDetails.getDescription().isEmpty()) {
                tvDescription.setText(classDetails.getDescription());
                tvDescription.setVisibility(View.VISIBLE);
            } else {
                tvDescription.setVisibility(View.GONE);
            }
        }
    }
    
    private void loadClassAttendance(String classId) {
        // Load attendance records for this class
        apiService.getClassAttendance("Bearer " + sessionManager.getAccessToken(), classId, null, null)
                .enqueue(new Callback<List<Attendance>>() {
                    @Override
                    public void onResponse(Call<List<Attendance>> call, Response<List<Attendance>> response) {
                        if (response.isSuccessful() && response.body() != null) {
                            List<Attendance> attendanceList = response.body();
                            attendanceAdapter.updateData(attendanceList);
                        }
                    }
                    
                    @Override
                    public void onFailure(Call<List<Attendance>> call, Throwable t) {
                        // Handle failure silently for now
                    }
                });
    }
    
    private void generateClassReport() {
        // Generate class attendance report
        Toast.makeText(this, "Generating report...", Toast.LENGTH_SHORT).show();
        // TODO: Implement report generation
    }
    
    private void saveClass() {
        // Validate input fields
        if (!validateInputs()) {
            return;
        }
        
        // Create or update class object
        Class classToSave = new Class();
        if (currentMode == MODE_EDIT && classDetails != null) {
            classToSave.setId(classDetails.getId());
        }
        
        // Set class properties from UI (you'll need to convert TextViews to EditTexts for editing)
        // For now, using existing data
        if (classDetails != null) {
            classToSave = classDetails;
        }
        
        // Show loading
        Toast.makeText(this, "Saving class...", Toast.LENGTH_SHORT).show();
        
        // Call appropriate API method
        if (currentMode == MODE_CREATE) {
            createClass(classToSave);
        } else if (currentMode == MODE_EDIT) {
            updateClass(classToSave);
        }
    }
    
    private boolean validateInputs() {
        // Add validation logic here
        return true;
    }
    
    private void createClass(Class newClass) {
        apiService.createClass("Bearer " + sessionManager.getAccessToken(), newClass)
                .enqueue(new Callback<Class>() {
                    @Override
                    public void onResponse(Call<Class> call, Response<Class> response) {
                        if (response.isSuccessful() && response.body() != null) {
                            Toast.makeText(ClassDetailsActivity.this, 
                                "Class created successfully", Toast.LENGTH_SHORT).show();
                            setResult(RESULT_OK);
                            finish();
                        } else {
                            showError("Failed to create class");
                        }
                    }
                    
                    @Override
                    public void onFailure(Call<Class> call, Throwable t) {
                        showError("Network error. Please try again.");
                    }
                });
    }
    
    private void updateClass(Class updatedClass) {
        apiService.updateClass("Bearer " + sessionManager.getAccessToken(), 
                updatedClass.getId(), updatedClass)
                .enqueue(new Callback<Class>() {
                    @Override
                    public void onResponse(Call<Class> call, Response<Class> response) {
                        if (response.isSuccessful() && response.body() != null) {
                            Toast.makeText(ClassDetailsActivity.this, 
                                "Class updated successfully", Toast.LENGTH_SHORT).show();
                            setResult(RESULT_OK);
                            finish();
                        } else {
                            showError("Failed to update class");
                        }
                    }
                    
                    @Override
                    public void onFailure(Call<Class> call, Throwable t) {
                        showError("Network error. Please try again.");
                    }
                });
    }
    
    private void showError(String message) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
    }
}
